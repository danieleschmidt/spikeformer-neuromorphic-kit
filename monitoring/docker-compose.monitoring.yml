# Comprehensive monitoring stack for Spikeformer Neuromorphic Kit
version: '3.8'

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: spikeformer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.prometheus=true"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: spikeformer-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
    labels:
      - "monitoring.grafana=true"

  # AlertManager for alert handling
  alertmanager:
    image: prom/alertmanager:latest
    container_name: spikeformer-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alert_manager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
      - '--log.level=info'
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.alertmanager=true"

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: spikeformer-otel-collector
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics export
      - "13133:13133" # Health check
      - "1777:1777"   # pprof
      - "55679:55679" # zpages
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/otel-collector-config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: ["--config=/etc/otelcol-contrib/otel-collector-config.yaml"]
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
      - jaeger
    labels:
      - "monitoring.otel=true"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: spikeformer-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
      - "6831:6831/udp" # UDP compact
      - "6832:6832/udp" # UDP binary
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger-data:/tmp
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.jaeger=true"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: spikeformer-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.node-exporter=true"

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: spikeformer-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.cadvisor=true"

  # Postgres Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: spikeformer-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://spikeformer:spikeformer_password@postgres:5432/spikeformer?sslmode=disable
    networks:
      - monitoring
      - spikeformer-network
    restart: unless-stopped
    depends_on:
      - postgres
    labels:
      - "monitoring.postgres-exporter=true"

  # Redis Exporter for cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: spikeformer-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
      - spikeformer-network
    restart: unless-stopped
    depends_on:
      - redis
    labels:
      - "monitoring.redis-exporter=true"

  # Elasticsearch for log aggregation (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: spikeformer-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.elasticsearch=true"

  # Kibana for log visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: spikeformer-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - elasticsearch
    labels:
      - "monitoring.kibana=true"

  # Loki for log aggregation (alternative to Elasticsearch)
  loki:
    image: grafana/loki:latest
    container_name: spikeformer-loki
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./loki-config.yaml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.loki=true"

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: spikeformer-promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yaml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - loki
    labels:
      - "monitoring.promtail=true"

  # Tempo for trace storage (alternative to Jaeger)
  tempo:
    image: grafana/tempo:latest
    container_name: spikeformer-tempo
    ports:
      - "3200:3200"
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
    volumes:
      - tempo-data:/tmp/tempo
      - ./tempo-config.yaml:/etc/tempo.yaml:ro
    command: -config.file=/etc/tempo.yaml
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.tempo=true"

  # Uptime monitoring with Blackbox Exporter
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: spikeformer-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox-config.yml:/config/blackbox.yml:ro
    command:
      - '--config.file=/config/blackbox.yml'
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.blackbox=true"

  # Webhook receiver for external alerts
  webhook-receiver:
    image: adnanh/webhook:latest
    container_name: spikeformer-webhook-receiver
    ports:
      - "9000:9000"
    volumes:
      - ./webhook-hooks.json:/etc/webhook/hooks.json:ro
      - ./webhook-scripts:/var/scripts:ro
    command: ["-hooks", "/etc/webhook/hooks.json", "-verbose"]
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.webhook=true"

networks:
  monitoring:
    driver: bridge
  spikeformer-network:
    external: true

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  jaeger-data:
    driver: local
  elasticsearch-data:
    driver: local
  loki-data:
    driver: local
  tempo-data:
    driver: local