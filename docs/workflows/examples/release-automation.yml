# Release Automation Workflow for Spikeformer
# Automated release management with semantic versioning, changelog generation, and multi-platform distribution

name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-rc.*'
      - 'v*.*.*-beta.*'
      - 'v*.*.*-alpha.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        default: 'rc'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io

jobs:
  # Validate Release Readiness
  validate-release:
    name: Validate Release Readiness
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual releases, calculate next version
            current_version=$(python -c "import spikeformer; print(spikeformer.__version__)")
            echo "Current version: $current_version"
            
            # Install semver tool
            pip install semver
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                new_version=$(python -c "import semver; print(semver.bump_major('$current_version'))")
                ;;
              minor)
                new_version=$(python -c "import semver; print(semver.bump_minor('$current_version'))")
                ;;
              patch)
                new_version=$(python -c "import semver; print(semver.bump_patch('$current_version'))")
                ;;
              prerelease)
                new_version=$(python -c "import semver; print(semver.bump_prerelease('$current_version', '${{ github.event.inputs.prerelease_tag }}'))")
                ;;
            esac
            
            echo "version=$new_version" >> $GITHUB_OUTPUT
            echo "is_prerelease=$([[ '$new_version' =~ -(alpha|beta|rc) ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          else
            # For tag-based releases, extract version from tag
            version=${GITHUB_REF#refs/tags/v}
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "is_prerelease=$([[ '$version' =~ -(alpha|beta|rc) ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate version format
        run: |
          python -c "
          import re
          import sys
          
          version = '${{ steps.version.outputs.version }}'
          pattern = r'^(\d+)\.(\d+)\.(\d+)(?:-(alpha|beta|rc)\.?(\d+)?)?$'
          
          if not re.match(pattern, version):
              print(f'Invalid version format: {version}')
              sys.exit(1)
          
          print(f'Valid version: {version}')
          "
      
      - name: Run tests
        run: pytest tests/ --tb=short -x
      
      - name: Run security checks
        run: |
          bandit -r spikeformer/ || true
          safety check || true
      
      - name: Check changelog exists
        run: |
          if [[ ! -f CHANGELOG.md ]]; then
            echo "CHANGELOG.md not found"
            exit 1
          fi

  # Build Release Artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: validate-release
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine
      
      - name: Build package
        run: python -m build
      
      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import spikeformer; print(f'Version: {spikeformer.__version__}')"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-packages-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/

  # Build and Push Docker Images
  build-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate-release
    
    strategy:
      matrix:
        target: [development, production-cpu, production-gpu, loihi2, spinnaker, edge]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},suffix=-${{ matrix.target }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.target }}
            type=semver,pattern={{major}},suffix=-${{ matrix.target }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.validate-release.outputs.version }}-${{ matrix.target }}
          format: spdx-json
          output-file: sbom-${{ matrix.target }}.spdx.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.target }}
          path: sbom-${{ matrix.target }}.spdx.json

  # Security Scan Release Artifacts
  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker-images]
    
    strategy:
      matrix:
        target: [production-cpu, production-gpu, loihi2, spinnaker, edge]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.validate-release.outputs.version }}-${{ matrix.target }}
          format: 'sarif'
          output: 'trivy-${{ matrix.target }}.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.target }}.sarif'

  # Generate Release Notes
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate release notes
        id: notes
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          
          # Find previous tag
          previous_tag=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
          current_tag="v$version"
          
          echo "Generating release notes from $previous_tag to $current_tag"
          
          # Generate changelog
          cat > release_notes.md << EOF
          # Release v$version
          
          ## What's Changed
          
          EOF
          
          # Get commits since last release
          if [[ -n "$previous_tag" ]]; then
            git log --pretty=format:"* %s (%h)" "$previous_tag..HEAD" >> release_notes.md
          else
            git log --pretty=format:"* %s (%h)" --max-count=20 >> release_notes.md
          fi
          
          cat >> release_notes.md << EOF
          
          ## Docker Images
          
          The following Docker images are available for this release:
          
          \`\`\`bash
          # Production images
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:$version-production-cpu
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:$version-production-gpu
          
          # Hardware-specific images
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:$version-loihi2
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:$version-spinnaker
          
          # Edge deployment
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:$version-edge
          \`\`\`
          
          ## Installation
          
          ### PyPI
          \`\`\`bash
          pip install spikeformer-neuromorphic-kit==$version
          \`\`\`
          
          ### From Source
          \`\`\`bash
          git clone https://github.com/${{ github.repository }}
          cd spikeformer-neuromorphic-kit
          git checkout v$version
          pip install -e ".[all]"
          \`\`\`
          
          ## Verification
          
          To verify the installation:
          \`\`\`python
          import spikeformer
          print(f"Spikeformer version: {spikeformer.__version__}")
          \`\`\`
          
          EOF
          
          # Set output
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release_notes.md

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, security-scan]
    environment: pypi
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-packages-ubuntu-latest-py${{ env.PYTHON_VERSION }}
          path: dist/
      
      - name: Publish to TestPyPI first
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
      
      - name: Test installation from TestPyPI
        run: |
          pip install --index-url https://test.pypi.org/simple/ \
                      --extra-index-url https://pypi.org/simple/ \
                      spikeformer-neuromorphic-kit==${{ needs.validate-release.outputs.version }}
          python -c "import spikeformer; print(f'TestPyPI version: {spikeformer.__version__}')"
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-docker-images, generate-release-notes, publish-pypi]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release_notes }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            python-packages-ubuntu-latest-py${{ env.PYTHON_VERSION }}/dist/*
            sbom-*.spdx.json
          token: ${{ secrets.GITHUB_TOKEN }}

  # Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
      
      - name: Build documentation
        run: sphinx-build -b html docs/ docs/_build/
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build
          cname: docs.spikeformer.ai

  # Post-Release Tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update version for development
        if: needs.validate-release.outputs.is_prerelease == 'false'
        run: |
          # Bump version for next development cycle
          current_version="${{ needs.validate-release.outputs.version }}"
          next_version=$(python -c "
          import semver
          version = semver.VersionInfo.parse('$current_version')
          next_dev = version.bump_patch()
          print(f'{next_dev}-dev')
          ")
          
          # Update version in source code
          sed -i "s/__version__ = \".*\"/__version__ = \"$next_version\"/" spikeformer/__init__.py
          
          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add spikeformer/__init__.py
          git commit -m "chore: bump version to $next_version for development"
          git push
      
      - name: Create post-release issue
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const isPrerelease = '${{ needs.validate-release.outputs.is_prerelease }}' === 'true';
            
            const issueTitle = `Post-release tasks for v${version}`;
            const issueBody = `
            ## Post-release checklist for v${version}
            
            - [ ] Verify PyPI package installation
            - [ ] Test Docker images on different platforms
            - [ ] Update conda-forge recipe (if applicable)
            - [ ] Announce release on social media/blog
            - [ ] Update citations and DOI (if applicable)
            - [ ] Check documentation deployment
            - [ ] Monitor for user feedback and issues
            ${isPrerelease ? '- [ ] Plan stable release timeline' : ''}
            
            ## Links
            - [PyPI Package](https://pypi.org/project/spikeformer-neuromorphic-kit/${version}/)
            - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${version})
            - [Documentation](https://docs.spikeformer.ai)
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['release', 'task']
            });

  # Deployment to Staging/Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment: production
    
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying v${{ needs.validate-release.outputs.version }} to production..."
          # Add your production deployment commands here
          # This might include:
          # - Updating Kubernetes deployments
          # - Rolling out to cloud services
          # - Updating configuration management
          
          echo "Production deployment completed successfully"
      
      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment validation..."
          # Add validation tests here
          # - Health checks
          # - Integration tests against production
          # - Performance validation
          
          echo "Post-deployment validation completed"

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release, deploy-production]
    if: always()
    
    steps:
      - name: Notify team of release
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const isPrerelease = '${{ needs.validate-release.outputs.is_prerelease }}' === 'true';
            const success = '${{ needs.create-github-release.result }}' === 'success';
            
            const title = success ? 
              `🎉 Successfully released v${version}` : 
              `❌ Release v${version} failed`;
            
            const body = success ? 
              `Version v${version} has been successfully released and is now available on PyPI and GitHub.` :
              `Release v${version} encountered issues. Please check the workflow logs.`;
            
            // This would typically send to Slack, Discord, or email
            console.log(`${title}\n${body}`);
            
            // You can add actual notification logic here
            // For example, Slack webhook, Discord webhook, etc.