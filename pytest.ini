[tool:pytest]
minversion = 7.0
testpaths = tests
python_files = test_*.py *_test.py
python_functions = test_*
python_classes = Test*

addopts = 
    -ra
    --strict-markers
    --strict-config
    --tb=short
    --cov=spikeformer
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10
    --benchmark-skip
    -p no:warnings

markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    hardware: marks tests requiring neuromorphic hardware
    loihi2: marks tests requiring Intel Loihi 2 hardware
    spinnaker: marks tests requiring SpiNNaker hardware
    gpu: marks tests requiring GPU acceleration
    benchmark: marks tests as performance benchmarks
    unit: marks tests as unit tests
    regression: marks tests for regression testing
    smoke: marks tests as smoke tests for quick validation
    memory_intensive: marks tests that use significant memory
    requires_internet: marks tests that need internet connection
    model_download: marks tests that download pretrained models

filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*torch.distributed.*:UserWarning
    ignore:.*transformers.*:FutureWarning

# Test discovery
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    ".git",
    ".tox",
    ".nox",
    "venv",
    ".venv"
]

# Timeout settings
timeout = 300  # 5 minutes default timeout
timeout_method = thread

# Benchmark settings
benchmark_min_rounds = 3
benchmark_max_time = 10
benchmark_min_time = 0.1
benchmark_warmup = true
benchmark_warmup_iterations = 2

# Coverage settings
[coverage:run]
source = spikeformer
omit = 
    */tests/*
    */test_*
    setup.py
    */venv/*
    */.venv/*
    */build/*
    */dist/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    # Type checking imports
    if TYPE_CHECKING:

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml