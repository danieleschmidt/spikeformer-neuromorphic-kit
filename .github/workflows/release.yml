name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Build and Test
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        pytest tests/unit/ tests/integration/ -v --tb=short
        
    - name: Run security checks
      run: |
        bandit -r spikeformer/ -f txt
        safety check

  # Build Python Package
  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: dist/
        retention-days: 30

  # Build and Push Container Images
  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 45
    
    strategy:
      matrix:
        target: [cpu, gpu, loihi2, spinnaker, edge]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag,suffix=-${{ matrix.target }}
          type=semver,pattern={{version}},suffix=-${{ matrix.target }}
          type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.target }}
          type=semver,pattern={{major}},suffix=-${{ matrix.target }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production-${{ matrix.target }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Generate SBOM
  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [build-python, build-containers]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Python packages
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/

    - name: Generate SBOM for Python package
      uses: anchore/sbom-action@v0
      with:
        path: dist/
        format: spdx-json
        output-file: sbom-python.spdx.json

    - name: Generate SBOM for container
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-cpu
        format: spdx-json
        output-file: sbom-container.spdx.json

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          sbom-python.spdx.json
          sbom-container.spdx.json
        retention-days: 90

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-containers
    timeout-minutes: 20
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-cpu
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-python, generate-sbom, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/p/spikeformer-neuromorphic-kit
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-pypi, build-containers]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate release notes from commits
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "## What's Changed" > release_notes.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "First stable release of SpikeFormer Neuromorphic Kit" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Container Images" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:${VERSION}-cpu\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:${VERSION}-gpu\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:${VERSION}-loihi2\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:${VERSION}-spinnaker\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:${VERSION}-edge\`" >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.release_notes.outputs.version }}
        body_path: release_notes.md
        files: |
          artifacts/python-packages/*
          artifacts/sbom-reports/*
        generate_release_notes: false
        make_latest: true

  # Notify on Success
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [github-release]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "🎉 Release ${{ github.ref_name }} published successfully!"
        echo "📦 Python package: https://pypi.org/project/spikeformer-neuromorphic-kit/"
        echo "🐳 Container images: https://github.com/${{ github.repository }}/pkgs/container/spikeformer-neuromorphic-kit"
        echo "📋 Release notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"