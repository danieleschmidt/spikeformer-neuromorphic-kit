# GitHub Actions CI/CD pipeline for Neuromorphic Platform
# Place this file at: .github/workflows/ci-cd.yaml

name: Neuromorphic Platform CI/CD

on:
  push:
    branches: [ main, develop, 'release/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        torch-version: ['1.13.0', '2.0.0', '2.1.0']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/torch
          key: ${{ runner.os }}-pip-torch${{ matrix.torch-version }}-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch==${{ matrix.torch-version }} --index-url https://download.pytorch.org/whl/cpu
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-benchmark

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 spikeformer --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check spikeformer
          isort --check-only spikeformer

      - name: Run type checking
        run: |
          pip install mypy
          mypy spikeformer --ignore-missing-imports

      - name: Run unit tests
        run: |
          pytest tests/unit --cov=spikeformer --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: |
          pytest tests/integration -v

      - name: Run benchmarks
        run: |
          pytest tests/performance --benchmark-only --benchmark-json=benchmark.json

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        if: github.ref == 'refs/heads/main'
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: python

      - name: Check for secrets
        uses: Yelp/detect-secrets-action@master
        with:
          args: '--scan --baseline .secrets.baseline'

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to development
        run: |
          export IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          ./deployment/deploy.sh dev deploy
        env:
          KUBECONFIG: kubeconfig

      - name: Run smoke tests
        run: |
          kubectl port-forward -n neuromorphic svc/neuromorphic-api 8080:8080 &
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/ready || exit 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          ./deployment/deploy.sh staging deploy
        env:
          KUBECONFIG: kubeconfig

      - name: Run integration tests
        run: |
          pytest tests/e2e --staging-url="https://neuromorphic-staging.yourdomain.com"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          export IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          ./deployment/deploy.sh production deploy
        env:
          KUBECONFIG: kubeconfig

      - name: Run production health checks
        run: |
          sleep 60  # Wait for deployment to stabilize
          kubectl get pods -n neuromorphic
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=neuromorphic -n neuromorphic --timeout=300s

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            - Neuromorphic platform deployment
            - Docker image: `${{ needs.build.outputs.image-tag }}`
            - Digest: `${{ needs.build.outputs.image-digest }}`
          draft: false
          prerelease: false

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance benchmarks
        run: |
          python scripts/benchmark_production.py \
            --url="https://neuromorphic.yourdomain.com" \
            --duration=300 \
            --output=performance-report.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.json

      - name: Check SLA compliance
        run: |
          python scripts/check_sla.py performance-report.json

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-production]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Rollback deployment
        run: |
          ./deployment/deploy.sh production rollback
        env:
          KUBECONFIG: kubeconfig

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸš¨ Production deployment failed and was rolled back"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}